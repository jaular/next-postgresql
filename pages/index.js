import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { PrismaClient } from "@prisma/client";
import Layout from "@/components/Layout";
import List from "@/components/List";
import MovieForm from "@/components/MovieForm";

const prisma = new PrismaClient();

export default function Home({ data }) {
  const router = useRouter();
  const [actionButton, setActionButton] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    year: "",
    rating: "",
    imageUrl: "",
    description: "",
    slug: "",
  });

  useEffect(() => {
    setIsRefreshing(false);
  }, [data]);

  function refreshData() {
    router.replace(router.asPath);
    setIsRefreshing(true);
    handleClean();
  }

  function handleClean() {
    setFormData({
      title: "",
      year: "",
      rating: "",
      imageUrl: "",
      description: "",
      slug: "",
    });
  }

  function handleCancel(e) {
    e.preventDefault();
    handleClean();
    setActionButton(true);
  }

  async function handleSave(e) {
    e.preventDefault();

    const response = await fetch("/api/movie", {
      method: "POST",
      body: JSON.stringify(formData),
    });

    if (response.status < 300) {
      await response.json();
      refreshData();
    }
  }

  async function handleUpdate(e) {
    e.preventDefault();

    const response = await fetch("/api/movie", {
      method: "PUT",
      body: JSON.stringify(formData),
    });

    setActionButton(true);

    if (response.status < 300) {
      await response.json();
      refreshData();
    }
  }

  async function handleDelete(e) {
    const response = await fetch("/api/movie", {
      method: "DELETE",
      body: JSON.stringify(e),
    });

    setActionButton(true);

    if (response.status < 300) {
      await response.json();
      refreshData();
    }
  }

  async function handleEdit(e) {
    const { id, title, year, rating, imageUrl, description, slug } = e;
    setFormData({
      id,
      title,
      year,
      rating,
      imageUrl,
      description,
      slug,
    });
    setActionButton(false);
  }

  return (
    <>
      <Head>
        <title>Movie list</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <div className="space-y-8 sm:grid sm:grid-cols-2 sm:gap-x-6 sm:gap-y-10 sm:space-y-0 lg:gap-x-8">
          <div>
            <div className="space-y-6">
              <h1 className="text-3xl font-bold text-gray-800 md:text-4xl">
                Movie list ðŸŽ¥
              </h1>

              {data.length > 0 ? (
                <List
                  data={data}
                  handleEdit={handleEdit}
                  handleDelete={handleDelete}
                />
              ) : (
                <p className="text-gray-800">Sorry! There are no movies</p>
              )}
            </div>
          </div>

          <div>
            <MovieForm
              formData={formData}
              setFormData={setFormData}
              handleCancel={handleCancel}
              handleUpdate={handleUpdate}
              handleSave={handleSave}
              actionButton={actionButton}
              isRefreshing={isRefreshing}
            />
          </div>
        </div>
      </Layout>
    </>
  );
}

export async function getServerSideProps() {
  let movies;
  try {
    movies = await prisma.movie.findMany();
  } catch (error) {
    movies = [];
  }

  return {
    props: {
      data: movies,
    },
  };
}
